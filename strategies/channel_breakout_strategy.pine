// Channel Brakeout Strategy

//@version=6
strategy(title = "Channel Brakeout Strategy", shorttitle = "ChBrk", overlay = true, initial_capital = 1000, currency = currency.EUR)
// commission_type = strategy.commission.percent, commission_value = 0.1) // margin_long=100, margin_short=100

// Parameters
inner_channel = input.float(30, title = "Inner Channel [% / 10]") / 1000
outer_channel = input.float(10, title = "Outer Channel [% / 10]") / 1000
//init_pos_size = input.float(100, title = "init_pos_size [EUR]")
//src = input.source(close, title = "Source")
// Positition size factors
float psf0 = 0.1
float psf1 = 0.1
float psf2 = 0.1
float psf3 = 0.2
float psf4 = 0.2
float psf5 = 0.2
float psf6 = 0.3
float psf7 = 0.3
float psf8 = 0.3
float psf9 = 0.4

///////////////
// FUNCTIONS //
///////////////

// This function uses different length EMAs, its derivatives and RSI to find potential uptrends.
ema_diff_rsi_pos() =>
    // EMA calculations
    ema42 = ta.ema(close, 42)
    ema100 = ta.ema(close, 100)
    ema200 = ta.ema(close, 200)
    // Price and EMAs must be aligned in incremental order
    ema_cond = low > ema42 and ema42 > ema100 and ema100 > ema200
    // EMA derivatives must be positive
    ema_diff_cond = ema42 > ema42[1] and ema100 > ema100[1] and ema200 > ema200[1]

    // RSI
    len_rsi = 14
    up = ta.rma(math.max(ta.change(close), 0), len_rsi)
    down = ta.rma(-math.min(ta.change(close), 0), len_rsi)
    rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
    // RSI must be high
    rsi_cond = rsi >= 50

    // Check all conditions
    ema_cond and ema_diff_cond and rsi_cond

// Same but the negative version
ema_diff_rsi_neg() =>
    // EMA calculations
    ema42 = ta.ema(close, 42)
    ema100 = ta.ema(close, 100)
    ema200 = ta.ema(close, 200)
    // Price and EMAs must be aligned in decremental order
    ema_cond = high < ema42 and ema42 < ema100 and ema100 < ema200
    // EMA derivatives must be negative
    ema_diff_cond = ema42 < ema42[1] and ema100 < ema100[1] and ema200 < ema200[1]

    // RSI
    len_rsi = 14
    up = ta.rma(math.max(ta.change(close), 0), len_rsi)
    down = ta.rma(-math.min(ta.change(close), 0), len_rsi)
    rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
    // RSI must be low
    rsi_cond = rsi <= 50

    // Check all conditions
    ema_cond and ema_diff_cond and rsi_cond

// Variance
variance() =>
    length = 14
    mean = ta.sma(close, length)  // Mean
    sum_squares = math.sum(math.pow(close - mean, 2), length)  // Sum of squared deviations
    sum_squares / length  // Divide by the number of points to get variance

// Normalized variance (returns-based)
normalized_variance() =>
    length = 14
    returns = 100 * ta.change(close) / close[1]  // Calculate percentage changes (returns)
    mean_return = ta.sma(returns, length)  // Calculate the mean of returns
    sum_squares = math.sum(math.pow(returns - mean_return, 2), length)  // Calculate the sum of squared deviations
    sum_squares / length  // Divide by the number of points to get variance

///////////
// LOGIC //
///////////

// State machine
enum State
    IDLE
    CALC_LONG_CH
    CALC_SHORT_CH
    ENTER_LONG_ORD
    ENTER_SHORT_ORD
    IN_LONG_ORD
    IN_SHORT_ORD

// Initialize the state and variables (this happens only once)
// State
var State state = State.IDLE
// Channel prices
var float out_top = 0
var float in_top = 0
var float in_bot = 0
var float out_bot = 0
// Trade management
var int n_lost_trades = 0  // Lost trades in a row
var int max_lost_trades = 4
var int wintrades = 0
var int losstrades = 0
var float pos_size = 0

// Visualization
enum VisualState
    IDLE
    PLOT
    PLOT_LOSS
var VisualState visual_state = VisualState.IDLE
var int start_bar = 0

// Caclulate indicators at each bar
// rsi = ta.rsi(close, 24)  // RSI
bool edr_pos = ema_diff_rsi_pos()
bool edr_neg = ema_diff_rsi_neg()

// Check long / short condition
// RSI
// bool long_cond = rsi > 80
// bool short_cond = rsi < 20
// EDR
bool long_cond = edr_pos
bool short_cond = edr_neg
// Assert
if long_cond and short_cond
    runtime.error("long_cond and short_cond")

// Determine entry point
if state == State.IDLE
    if long_cond
        state := State.CALC_LONG_CH
    else if short_cond
        state := State.CALC_SHORT_CH
    else
        state := State.IDLE

// Calculate channel
if state == State.CALC_LONG_CH
    out_top := close * (1 + outer_channel)
    in_top := close 
    in_bot := close * (1 - inner_channel)
    out_bot := close * (1 - inner_channel - outer_channel)
    start_bar := bar_index
    state := State.ENTER_LONG_ORD
    if n_lost_trades != 0 // Assert
        runtime.error("n_lost_trades != 0")
else if state == State.CALC_SHORT_CH
    out_top := close * (1 + inner_channel + outer_channel)
    in_top := close * (1 + inner_channel)
    in_bot := close 
    out_bot := close * (1 - outer_channel)
    start_bar := bar_index
    state := State.ENTER_SHORT_ORD
    if n_lost_trades != 0 // Assert
        runtime.error("n_lost_trades != 0")

// Check if order is exited
if (state == State.IN_LONG_ORD or state == State.IN_SHORT_ORD) and strategy.opentrades == 0
    // Last trade won    
    if strategy.wintrades == wintrades + 1        
        wintrades := strategy.wintrades
        if losstrades != strategy.losstrades // Assert
            runtime.error("losstrades != strategy.losstrades")
        state := State.IDLE
        n_lost_trades := 0
        visual_state := VisualState.PLOT
    // Last trade lost
    else if strategy.losstrades == losstrades + 1        
        losstrades := strategy.losstrades
        if wintrades != strategy.wintrades // Assert
            runtime.error("wintrades != strategy.wintrades")
        if state == State.IN_LONG_ORD
            state := State.ENTER_SHORT_ORD
        else if state == State.IN_SHORT_ORD
            state := State.ENTER_LONG_ORD
        n_lost_trades += 1    
    else
        runtime.error("Error after order exit:" + " s.w:" + str.tostring(strategy.wintrades) + " w:" + str.tostring(wintrades) + " s.l:" + str.tostring(strategy.losstrades) + " l:" + str.tostring(losstrades))

// Calculate position size
if n_lost_trades == 0
    pos_size := strategy.equity * psf0
else if n_lost_trades == 1
    pos_size := strategy.equity * psf1
else if n_lost_trades == 2
    pos_size := strategy.equity * psf2
else if n_lost_trades == 3
    pos_size := strategy.equity * psf3
else if n_lost_trades == 4
    pos_size := strategy.equity * psf4
else if n_lost_trades == 5
    pos_size := strategy.equity * psf5
else if n_lost_trades == 6
    pos_size := strategy.equity * psf6
else if n_lost_trades == 7
    pos_size := strategy.equity * psf7
else if n_lost_trades == 8
    pos_size := strategy.equity * psf8
else if n_lost_trades == 9
    pos_size := strategy.equity * psf9
else if n_lost_trades == 10
    // Maximum no. lost trades
    state := State.IDLE
    n_lost_trades := 0
    visual_state := VisualState.PLOT_LOSS
else
    runtime.error("n_lost_trades")

// Enter long order
if state == State.ENTER_LONG_ORD
    entry_name = str.tostring(bar_index) + "_long"
    strategy.entry(entry_name, strategy.long, qty = (pos_size / close))
    strategy.exit(entry_name + "_exit", from_entry = entry_name, limit = out_top, stop = in_bot)
    state := State.IN_LONG_ORD
// Enter short order
if state == State.ENTER_SHORT_ORD
    entry_name = str.tostring(bar_index) + "_short"
    strategy.entry(entry_name, strategy.short, qty = (pos_size / close)) 
    strategy.exit(entry_name + "_exit", from_entry = entry_name, limit = out_bot, stop = in_top)
    state := State.IN_SHORT_ORD
 

///////////////////
// VISUALIZATION //
///////////////////

// Color background
//bgcolor(edr_pos ? #00FF0030 : #FF000030)
bg_color = long_cond ? #00FF0030 :  // Semi-transparent green - color.new(color.green, 70)
           short_cond ? #FF000030 : // Semi-transparent red - color.new(color.red, 70)
           na                         // No color
bgcolor(bg_color)

// Draw loss marker
plotshape(visual_state == VisualState.PLOT_LOSS, style=shape.triangleup, location=location.belowbar, color=color.red, size=size.huge) 

// Draw channel
if visual_state == VisualState.PLOT or visual_state == VisualState.PLOT_LOSS or barstate.islast
    line.new(x1=start_bar, y1=out_top, x2=bar_index, y2=out_top, color=color.blue, width=2)
    line.new(x1=start_bar, y1=in_top, x2=bar_index, y2=in_top, color=color.red, width=2)
    line.new(x1=start_bar, y1=in_bot, x2=bar_index, y2=in_bot, color=color.red, width=2)
    line.new(x1=start_bar, y1=out_bot, x2=bar_index, y2=out_bot, color=color.blue, width=2)    
    visual_state := VisualState.IDLE

//label.new(bar_index, high, text=str.tostring(state))
//plot(strategy.equity)
//plot(strategy.position_size)
